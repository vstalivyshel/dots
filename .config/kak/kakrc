#------------------------------------------------------------------------------
colorscheme rose-pine-moon

add-highlighter -override global/ number-lines -relative -hlcursor -separator \    
set-option global ui_options terminal_assistant=none
set-option global tabstop 4
set-option global scrolloff 15,0
set-option global startup_info_version 999999999

#------------------------------------------------------------------------------

# https://git.sr.ht/~raiguard/kak-live-grep/tree/main/item/live-grep.kak

# declare-option -hidden str live_grep_file  %{ %sh{ echo "/tmp/kak-live-grep." } }
# define-command -override \
#     %{
#         set-option buffer filetype grep
#         set-option buffer grep_current_line 0
#         prompt -on-change %{
#           evaluate-commands %sh{
#               if [ -z $kak_quoted_text ]; then
#                   exit 0
#               fi
#               "$kak_opt_grepcmd" "$kak_quoted_text"  | tr -d '\r' 2>&1 > "$kak_opt_live_grep_file"
#           }    
#         }
#     }

# ------------------------------------------------------------------------------

hook global -group auto-pairs InsertChar '(\(|\[|\Q"\E|\{|<)' %{
    evaluate-commands -save-regs 'oc' -itersel %{
        execute-keys -draft '<esc>h"oy'
        set-register 'c' %sh{
            inserted="$kak_reg_o"
            op=( '"' '[' '{' '(' '<' )
            cl=( '"' ']' '}' ')' '>' )
           close=
            for i in "${!op[@]}"; do
               [ $inserted == "${op[$i]}" ] && close="${cl[$i]}"
            done
            printf "$close"
       }
        execute-keys -itersel '<a-;>;<a-;>"cP'
    }
    hook window -group insert-newline -once InsertChar '\n' %{
       execute-keys "<a-;>;<ret><esc>KK<a-&>j<a-gt>"
       execute-keys -with-hooks A
    }
    hook window -group auto-pairs -once InsertChar '.*' %{
        remove-hooks window insert-newline  
    }
    hook window -group auto-pairs -once ModeChange pop:insert:.* %{
        remove-hooks window insert-newline
    } 
}

#------------------------------------------------------------------------------

# define-command surround-with-char \
#     -override \
#     -params 1 \
#     %{
#         declare-option -hidden str "'"
#         hook window -once -group surround-with 
#         execute-keys -with-hooks -itersel -draft -save-regs 'm' '"mdi' %arg{1} '<c-r>m' 
#     }

# declare-user-mode surround-mode
# map global user s ''

#------------------------------------------------------------------------------
# lsp
evaluate-commands %sh{kak-lsp --kakoune -s $kak_session}
hook global WinSetOption filetype=(rust|python|lua|sh|c) %{
    lsp-enable-window
    set-option window lsp_hover_insert_mode_trigger nop 
}

set-option global lsp_diagnostic_line_error_sign 'E'
set-option global lsp_diagnostic_line_warning_sign 'W'
set-option global lsp_diagnostic_line_info_sign 'I'
set-option global lsp_diagnostic_line_hint_sign 'H'
set-option global lsp_hover_anchor false
set-option global lsp_insert_spaces true
    

#------------------------------------------------------------------------------
define-command kak-talk \
    -docstring 'Send a kakoune command to the all sessions' \
    -override \
    -command-completion \
    -params .. \
     %{ nop %sh{ katalk $@ } }
alias global kak kak-talk 

define-command enable-auto-save \
    -docstring 'Enable auto-save' \
    -override \
   %{
        hook buffer -group autosave NormalIdle .* %{ try %{ write } }
        hook buffer -group autosave InsertIdle .* %{ try %{ write } }
    }

define-command disable-auto-save \
    -docstring 'Disable auto-save' \
    -override \
    %{ remove-hooks buffer autosave }

define-command find-file \
    -docstring 'Fuzzy search for the files'\
    -override \
    %{
        prompt \
        -menu  \
        -shell-script-candidates %{fd -tf || find . -type f || return "sooqa"} \
        'file: ' \
        %{ try %{ edit %val{text} } }
    }

define-command find-buffer \
    -docstring 'Open an exising buffer' \
    -override \
    %{prompt -menu -buffer-completion 'buffer: ' 'buffer %val{text}' }

define-command close-buffers \
    -docstring 'Delete a buffer(s)' \
    -override \
    -buffer-completion \
    -params .. \
    %{ evaluate-commands %sh{
        set -- "$@"
        for buffer
        do
            echo "db $buffer" 
        done
    } }
alias global cb close-buffers

define-command ls \
    -docstring 'List files in the current directory' \
    -override \
    %{ info -title "%val{client_env_PWD}/" %sh{ ls -Alh } }

define-command sh \
    -override \
    -file-completion \
    -params 1.. \
    %{ echo %sh{ "$@" } }

define-command set-filetype \
    -docstring 'Set a filetype for current buffer' \
    -override \
    -params 1 \
    %{ set-option current filetype %arg{1} }
alias global lang set-filetype

define-command new-file \
    -docstring 'Create a new file(s)'\
    -override \
    -params 1.. \
    %{ echo %sh{ touch "$@" }; edit %arg{1} }

#------------------------------------------------------------------------------

hook global -group escape-insert InsertChar j %{ try %{
    exec -draft hH<a-k>kj<ret>d
    exec <esc>
} }

map global normal X 'x_'
map global normal '#' ':comment-line<ret>'
map global normal <c-g> ":ls<ret>"

map global insert <c-w> '<a-;>b<a-;>"_d'
map global insert <c-h> <backspace>

map global user ';' 'y:<c-r>"<ret>' \
    -docstring 'Push selected into cmd'
map global user ':' 'y:<c-r>"<ret>' \
    -docstring 'Push selected into cmd for all sessions'
map global user / ':split<ret>' \
    -docstring 'Open current buffer in new window'
map global user b ':find-buffer<ret>' \
    -docstring 'Serch for the active buffers'
map global user f ':find-file<ret>' \
    -docstring 'Search for the file'

map global user y '<a-|>xsel --input --clipboard<ret>'\
    -docstring 'Yank into system Clipboard'
map global user P '!xsel --output --clipboard<ret>'\
    -docstring 'Paste after a seletction from the system clipboard'
map global user p '<a-!>xsel --output --clipboard<ret>'\
    -docstring 'Paste before a seletction from the system clipboard'

map global user l ':enter-user-mode lsp<ret>' \
    -docstring 'Enter lsp-mode'
map global insert <tab> '<a-;>:try lsp-snippets-select-next-placeholders catch %{ execute-keys -with-hooks <lt>tab> }<ret>'\
    -docstring 'Select next snippet placeholder'
map global object f '<a-semicolon>lsp-object Function Method<ret>'\
    -docstring 'LSP function or method'
map global object t '<a-semicolon>lsp-object Class Interface Struct<ret>'\
    -docstring 'LSP class interface or struct'
map global object d '<a-semicolon>lsp-diagnostic-object --include-warnings<ret>'\
    -docstring 'LSP errors and warnings'

declare-user-mode window-mode
map global normal <c-w> ':enter-user-mode window-mode<ret>' \
    -docstring 'Window Mode'
map global window-mode v ':vsplit<ret>' \
    -docstring 'Open the current buffer in vertical split'
map global window-mode s ':split<ret>' \
    -docstring 'Open the current buffer in horizontal split'
map global window-mode t ':tab<ret>' \
    -docstring 'Open the current buffer in new tab'
map global window-mode q ':q<ret>' \
    -docstring 'Close current window'

#------------------------------------------------------------------------------
